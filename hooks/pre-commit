#!/bin/bash
# Install with:
#   git config core.hooksPath hooks

# Executes tests against the code about to be submitted.  It makes a
# copy of the worktree using "git worktree", then patches in the
# *staged* changes (either those manually staged via "git add" or
# those generated by a standalone "git commit").  Then it runs the
# test.  If it passes, it cleans up.  This will cause git to leak
# worktrees, but that should not really be a problem.  Eventually the
# tempdir will be cleaned, and eventually git will detect the
# directories and clean up those things as well.

# If you want to manually clean up, something like the following works
# well:

# git worktree list |
#   awk '/tmp.tmp/ {print $1}' |
#   while read wt; do
#     echo $wt
#     git worktree remove -f $wt
#   done

# Yes, the following causes worktrees to leak
set -e

export PAGER=cat

branch=$(git branch --show-current)
patchfile=$(mktemp)
git diff --patch --cached > $patchfile

# In this particular script, we no longer want these environment
# variables set.
unset $(git rev-parse --local-env-vars)
dir=$(mktemp -d)
git worktree add --force $dir $branch
pushd $dir > /dev/null
git apply --allow-empty $patchfile
git diff --stat

# This is the test we want to run.
eslint .
hooks/style-linter.py

# Clean up.
popd > /dev/null
git worktree remove --force $dir
rm ${patchfile}
